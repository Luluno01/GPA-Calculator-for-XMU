const fs = require('fs');
const path = require('path');
const calcGPA = require('calcGPA');

class Timeout {
  constructor(time, timeoutCallback, step) {
    this.timeoutCallback = timeoutCallback || (() => {
      console.log('No timeout callback funtion was defined.');
    });
    this.startTime = (new Date()).getTime();
    this.time = time; // In milliseconds
    let _this = this;
    this.int = setInterval(() => {
      if ((new Date()).getTime() - _this.startTime > _this.time) { // Timeout!
        clearInterval(_this.int);
        _this.int = 0;
        _this.timeoutCallback();
      }
    }, step || 1000);
  }

  refresh() {
    this.startTime = (new Date()).getTime();
  }

  stop() {
    clearInterval(this.int);
    this.int = 0;
  }

  static newTimeout(time, timeoutCallback, step) {
    return new Timeout(time, timeoutCallback, step);
  }
}

class ScriptsAutoInjector {
  constructor(browserWindow, scripts, beforeInject) {
    this.state = 'idle';
    this.browserWindow = browserWindow;
    this.currentIndex = -1;
    this.scripts = scripts; // An array of scripts
    this.beforeInject = beforeInject; // An array of functions
    let length = scripts.length;
    let _this = this;
    browserWindow.webContents.on('did-finish-load', () => {
      if (_this.state == 'pending' && -1 < _this.currentIndex && _this.currentIndex < length) {
        setTimeout(() => {
          _this.browserWindow.webContents.executeJavaScript(_this.beforeInject[_this.currentIndex](_this.scripts[_this.currentIndex]));
          _this.currentIndex++;
        }, 3000);
      }
    });
  }
}

class Lib {
  constructor(index, portal) {
    this.index = index;
    this.portal = portal;
    this.rawData = [];
    this.res = [];
    this.timer = null;

    let scripts = [
      fs.readFileSync(path.join(path.dirname(__dirname), 'portalScript_0.js'), 'utf-8'),
      fs.readFileSync(path.join(path.dirname(__dirname), 'portalScript_1.js'), 'utf-8'),
      fs.readFileSync(path.join(path.dirname(__dirname), 'portalScript_2.js'), 'utf-8')
    ];

    let beforeInject = [
      script => {
        let insertion = 'let USERNAME = \'' + document.getElementById('username').value.replace(/\\/g, '\\\\').replace(/\'/g, "\\'").replace(/\"/g, '\\"') + '\';let PASSWORD = \'' + document.getElementById('password').value.replace(/\\/g, '\\\\').replace(/\'/g, "\\'").replace(/\"/g, '\\"') + '\';' + script;
        document.getElementById('password').value = '';
        return insertion;
      },
      script => script,
      script => script
    ];

    this.injector = new ScriptsAutoInjector(portal, scripts, beforeInject);

    this.onTimeout = () => null;
  }

  getGPA() {
    this.res = JSON.parse(JSON.stringify(this.rawData));
    let totalGPASum = 0
    let totalCreditSum = 0;
    for (let termIndex in this.res) {
      let term = this.res[termIndex];
      let termGPASum = 0;
      let termCreditSum = 0;
      for (let subjectIndex in term.subjects) {
        let grade;
        let subject = term.subjects[subjectIndex];
        // Filters
        if (subject.takingType == '选修' && subject.courseType != '学科或专业方向性课') continue;
        if (subject.grade.includes('合格')) continue;
        if (subject.grade == '') continue;

        // if(!(grade = parseInt(subject.grade))) { // A, B, ...
        //   let gpa_table = {
        //     'A': 4.0,
        //     'A-': 3.7,
        //     'B+': 3.3,
        //     'B': 3.0,
        //     'B-': 2.7,
        //     'C+': 2.3,
        //     'C': 2.0,
        //     'C-': 1.7,
        //     'D': 1.0,
        //     'F': 0
        //   };
        //   subject.GPA = subject.grade in gpa_table ? gpa_table[subject.grade] : 0;
        // } else {
        //   if(grade < 74.5) { // 0~74
        //     if(grade < 67.5) { // 0~67
        //       if(grade < 63.5) { // 0~63
        //         if(grade < 60) { // 0~59
        //           termGPASum += (subject.GPA = 0);
        //         } else { // 60~63
        //           termGPASum += (subject.GPA = 1.0);
        //         }
        //       } else { // 64~67
        //         termGPASum += (subject.GPA = 1.7);
        //       }
        //     } else if(grade < 71.5) { // 68~71
        //       termGPASum += (subject.GPA = 2.0);
        //     } else { // 72~74
        //       termGPASum += (subject.GPA = 2.3);
        //     }
        //   } else if(grade < 84.5) { // 75~84
        //     if(grade < 80.5) { // 75~80
        //       if(grade < 77.5) { // 75~77
        //         termGPASum += (subject.GPA = 2.7);
        //       } else { // 78~80
        //         termGPASum += (subject.GPA = 3.0);
        //       }
        //     } else { // 81~84
        //       termGPASum += (subject.GPA = 3.3);
        //     }
        //   } else if(grade < 89.5) { // 85~89
        //     termGPASum += (subject.GPA = 3.7);
        //   } else { // 90~
        //     termGPASum += (subject.GPA = 4.0);
        //   }
        // }
        termGPASum += (subject.GPA = calcGPA(subject.grade)) * parseFloat(subject.credit);
        termCreditSum += parseFloat(subject.credit);
        // End processing a subject
      }
      term.GPA = (termCreditSum == 0 ? 0 : termGPASum / termCreditSum);
      // End traversing subjects
      totalGPASum += termGPASum;
      totalCreditSum += termCreditSum;
      // End processing a term
    }
    this.res.push(totalCreditSum == 0 ? 0 : totalGPASum / totalCreditSum);
    // End traversing terms
  }

  onSuccess() {
    this.injector.state = 'success';
    this.timer.stop();
    this.timer = null;
  }

  onError() {
    this.injector.state = 'error';
    this.injector.currentIndex = -1;
    this.timer.stop();
    this.timer = null; // Release timer
  }

  prepareRawData() {
    this.injector.currentIndex = 0;
    this.injector.state = 'pending';
    let _this = this;
    this.timer = new Timeout(10000, () => {
      _this.onTimeout();
      _this.timer = null; // Release timer
      _this.injector.state = 'timeout';
    });
    this.portal.webContents.loadURL('http://ssfw.xmu.edu.cn/cmstar/index.portal');
  }

  setRawData(rawDataStr) {
    this.rawData = JSON.parse(rawDataStr);
    this.getGPA();
  }


  // http://blog.csdn.net/lowkeysk/article/details/8063816
  static hasClass(obj, cls) {
    return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
  }

  static addClass(obj, cls) {
    if (!Lib.hasClass(obj, cls)) obj.className += " " + cls;
  }

  static removeClass(obj, cls) {
    if (Lib.hasClass(obj, cls)) {
      var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
      obj.className = obj.className.replace(reg, ' ');
    }
  }

  static toggleClass(obj, cls) {
    if (Lib.hasClass(obj, cls)) {
      Lib.removeClass(obj, cls);
    } else {
      Lib.removeClassaddClass(obj, cls);
    }
  }
  // http://blog.csdn.net/lowkeysk/article/details/8063816

  static show(obj) {
    obj.style.display = '';
  }

  static hide(obj) {
    obj.style.display = 'none';
  }

  showPortal() {
    this.portal.show();
  }

  hidePortal() {
    this.portal.hide();
  }
}

module.exports = Lib;